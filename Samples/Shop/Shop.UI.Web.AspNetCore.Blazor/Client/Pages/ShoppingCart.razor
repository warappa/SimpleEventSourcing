@page "/shoppingCarts/{Id}"

@using Shop.UI.Web.Shared.ReadModels.ShoppingCarts
@using Shop.Core.Domain.ShoppingCarts

@inject HttpClient Http
@inject IDialogService DialogService


<h1>Shopping-Cart @(shoppingCart?.CustomerName)</h1>
<div style="position:relative;">
    @if (shoppingCart == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            @if (shoppingCart.Status == (int)ShoppingCartStatus.Open)
            {
            <MudButton Variant="Variant.Text" OnClick="OrderAsync"><MudIcon Icon="@Icons.Material.Filled.Money"></MudIcon> Order</MudButton>
            }
        </div>

        <MudSimpleTable>
            <thead>
                <tr>
                    <th>Article</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var article in shoppingCart.ShoppingCartArticles.Where(x => x.RemovedAt == null))
                {
                <tr>
                    <td>@article.Articlenumber</td>
                    <td>@article.Description</td>
                    <td>@article.Quantity</td>
                    <td>@article.PriceValue @article.PriceIsoCode</td>
                    <td>@article.TotalValue @article.TotalIsoCode</td>
                    <td>
                        @if (shoppingCart.Status == (int)ShoppingCartStatus.Open)
                        {
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="e => RemoveArticleFromShoppingCartAsync(article.ShoppingCartArticleId)"></MudIconButton>
                        }
                    </td>
                </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private ShoppingCartViewModelExt shoppingCart;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        shoppingCart = await Http.GetFromJsonAsync<ShoppingCartViewModelExt>($"api/shoppingCarts/{Id}");
    }

    protected async Task RemoveArticleFromShoppingCartAsync(string shoppingCartArticleId)
    {
        var command = new RemoveArticleFromShoppingCart
        {
            ShoppingCartId = Id,
            ShoppingCartArticleId = shoppingCartArticleId
        };

        await Http.PostAsJsonAsync("api/shoppingcarts/RemoveArticleFromShoppingCart", command);

        await LoadAsync();
    }

    protected async Task OrderAsync()
    {
        var command = new OrderShoppingCart
        {
            ShoppingCartId = Id
        };

        await Http.PostAsJsonAsync("api/shoppingcarts/Order", command);

        await LoadAsync();
    }
}
