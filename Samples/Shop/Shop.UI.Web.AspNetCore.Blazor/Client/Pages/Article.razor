@page "/articles/{Id}"
@using Shop.UI.Web.AspNetCore.Blazor.Shared
@inject HttpClient Http
@inject IDialogService DialogService

<h1>Article @(article?.Articlenumber)</h1>
<div style="position:relative;">
    @if (article == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {


        <div>
            @if (article.Active)
            {
                <MudButton Variant="Variant.Text" OnClick="e => orderArticleVisible = true"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Order</MudButton>
                <MudButton Variant="Variant.Text" OnClick="e => deactivateArticleVisible = true"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Deactivate</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Text" OnClick="e => activateArticleVisible = true"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Activate</MudButton>
            }
        </div>

        <MudDialog @bind-IsVisible="orderArticleVisible">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Deactivate @article.Articlenumber
                </MudText>
            </TitleContent>
            <DialogContent>
                <EditForm Model="OrderArticle" OnValidSubmit="@OrderArticleAsync">
                    <MudTextField @bind-Value="OrderArticle.Quantity" Label="Quantity"></MudTextField>

                    <MudSelect T="string"
                               @bind-Value="OrderArticle.CustomerId"
                               Label="Customer">
                        @foreach (var customer in customers)
                        {
                        <MudSelectItem T="string" Value="customer.CustomerId">@customer.Name</MudSelectItem>
                        }
                    </MudSelect>
                </EditForm>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OrderArticleAsync" Class="px-10">Order</MudButton>
            </DialogActions>
        </MudDialog>

        <MudDialog @bind-IsVisible="deactivateArticleVisible">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Deactivate @article.Articlenumber
                </MudText>
            </TitleContent>
            <DialogContent>
                <EditForm Model="DeactivateArticle" OnValidSubmit="@DeactivateArticleAsync">
                    <MudTextField @bind-Value="DeactivateArticle.Reason" Label="Reason"></MudTextField>
                </EditForm>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeactivateArticleAsync" Class="px-10">Deactivate</MudButton>
            </DialogActions>
        </MudDialog>

        <MudDialog @bind-IsVisible="activateArticleVisible">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Activate @article.Articlenumber
                </MudText>
            </TitleContent>
            <DialogContent>
                <EditForm Model="ActivateArticle" OnValidSubmit="@ActivateArticleAsync">
                    <MudTextField @bind-Value="ActivateArticle.Reason" Label="Reason"></MudTextField>
                </EditForm>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ActivateArticleAsync" Class="px-10">Activate</MudButton>
            </DialogActions>
        </MudDialog>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private ArticleViewModel article;
    private CustomerViewModel[] customers;

    private bool orderArticleVisible = false;
    private OrderArticle OrderArticle = new OrderArticle();

    private bool deactivateArticleVisible = false;
    private DeactivateArticle DeactivateArticle = new DeactivateArticle();

    private bool activateArticleVisible = false;
    private ActivateArticle ActivateArticle = new ActivateArticle();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        article = await Http.GetFromJsonAsync<ArticleViewModel>($"api/articles/{Id}");
        customers = await Http.GetFromJsonAsync<CustomerViewModel[]>($"api/customers");

        DeactivateArticle.Id = Id;
        ActivateArticle.Id = Id;
        OrderArticle.ArticleId = Id;
    }

    protected async Task OrderArticleAsync()
    {
        await Http.PostAsJsonAsync("api/customers/OrderArticle", OrderArticle);

        OrderArticle = new OrderArticle
        {
            ArticleId = Id
        };

        orderArticleVisible = false;

        await LoadAsync();
    }

    protected async Task DeactivateArticleAsync()
    {
        await Http.PostAsJsonAsync("api/articles/DeactivateArticle", DeactivateArticle);

        DeactivateArticle = new DeactivateArticle
        {
            Id = Id
        };

        deactivateArticleVisible = false;

        await LoadAsync();
    }

    protected async Task ActivateArticleAsync()
    {
        await Http.PostAsJsonAsync("api/articles/ActivateArticle", ActivateArticle);

        ActivateArticle = new ActivateArticle
        {
            Id = Id
        };

        activateArticleVisible = false;

        await LoadAsync();
    }

}
